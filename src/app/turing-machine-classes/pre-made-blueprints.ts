const bit_inversion = [ "Bit Inversion","2","0 0","1 1","2 _","0","2","0 q0","1 q1","2","3 0","2 1 2 R","0 0 1 R","1 0 0 R","3 1","2 1 2 R","0 1 0 R","1 1 1 R","1","1","0","0"]
const binary_add = ["Binary Addition","3","0 0","1 1","2 +","6 _","3","3 c","4 I","5 O","12","0 right","1 read","2 rewrite","3 done","4 back0","5 add0","6 have0","7 back1","8 carry","9 add1","10 have1","11 r","12","7 0","6 1 6 L","0 0 0 R","1 0 1 R","2 0 2 R","3 11 3 R","4 11 4 R","5 11 5 R","7 1","6 11 6 R","0 6 3 L","1 10 3 L","2 2 6 L","3 11 3 R","4 11 4 R","5 11 5 R","7 2","6 3 6 R","0 2 0 L","1 2 1 L","2 11 2 R","3 11 3 R","4 2 1 L","5 2 0 L","7 3","6 3 6 R","0 3 0 R","1 3 1 R","2 3 2 R","3 3 3 R","4 3 4 R","5 3 5 R","7 4","6 4 6 R","0 4 0 R","1 4 1 R","2 4 2 R","3 1 0 L","4 4 4 R","5 4 5 R","7 5","6 4 5 R","0 4 5 R","1 4 4 R","2 11 2 R","3 11 3 R","4 5 4 L","5 5 5 L","7 6","6 11 6 R","0 6 0 L","1 6 1 L","2 5 2 L","3 11 3 R","4 11 4 R","5 11 5 R","7 7","6 7 6 R","0 7 0 R","1 7 1 R","2 7 2 R","3 1 1 L","4 7 4 R","5 7 5 R","7 8","6 7 1 R","0 7 1 R","1 8 0 L","2 11 2 R","3 11 3 R","4 11 4 R","5 11 5 R","7 9","6 7 4 R","0 7 4 R","1 8 5 L","2 11 2 R","3 11 3 R","4 9 4 L","5 9 5 L","7 10","6 11 6 R","0 10 0 L","1 10 1 L","2 9 2 L","3 11 3 R","4 11 4 R","5 11 5 R","7 11","6 11 6 R","0 11 0 R","1 11 1 R","2 11 2 R","3 11 3 R","4 11 4 R","5 11 5 R","1","3","1","11","0"];
const L1 = ["L = { uu | u ∈ {0,1}* }","2","1 0","2 1","0 $","2","3 X","4 Y","11","0 q0","1 q1","2 q2","3 q3","4 q4","5 q5","6 q6","7 q7","8 q8","9 q9","10 r","11","5 0","0 10 0 R","1 1 3 R","2 1 4 R","3 4 3 L","4 4 4 L","5 1","0 2 0 L","1 1 1 R","2 1 2 R","3 2 3 L","4 2 4 L","5 2","0 10 0 R","1 3 3 L","2 3 4 L","3 10 3 R","4 10 4 R","5 3","0 10 0 R","1 3 1 L","2 3 2 L","3 0 3 R","4 0 4 R","5 4","0 5 0 R","1 10 1 R","2 10 2 R","3 4 1 L","4 4 2 L","5 5","0 9 0 L","1 6 3 R","2 7 4 R","3 10 3 R","4 10 4 R","5 6","0 6 0 R","1 6 1 R","2 6 2 R","3 8 0 L","4 10 4 R","5 7","0 7 0 R","1 7 1 R","2 7 2 R","3 10 3 R","4 8 0 L","5 8","0 8 0 L","1 8 1 L","2 8 2 L","3 5 3 R","4 5 4 R","5 9","0 9 0 R","1 9 1 R","2 9 2 R","3 9 3 R","4 9 4 R","5 10","0 10 0 R","1 10 1 R","2 10 2 R","3 10 3 R","4 10 4 R","1","9","1","10","0"];
const L2 = ["L = { 0^n 1^n 2^n | n > 0 }","3","0 0","1 1","2 2","6 $","3","3 X","4 Y","5 Z","7","0 q0","1 q1","2 q2","3 q3","4 q4","5 a1","6 r1","7","7 0","6 6 6 R","0 1 3 R","1 6 1 R","2 6 2 R","3 6 3 R","4 4 4 R","5 6 5 R","7 1","6 6 6 R","0 1 0 R","1 2 4 R","2 6 2 R","3 6 3 R","4 1 4 R","5 6 5 R","7 2","6 6 6 R","0 6 0 R","1 2 1 R","2 3 5 L","3 6 3 R","4 6 4 R","5 2 5 R","7 3","6 3 6 R","0 3 0 L","1 3 1 L","2 3 2 R","3 0 3 R","4 3 4 L","5 3 5 L","7 4","6 5 6 L","0 6 0 R","1 6 1 R","2 6 2 R","3 4 3 R","4 4 4 R","5 4 5 R","7 5","6 5 6 R","0 5 0 R","1 5 1 R","2 5 2 R","3 5 3 R","4 5 4 R","5 5 5 R","7 6","6 6 6 R","0 6 0 R","1 6 1 R","2 6 2 R","3 6 3 R","4 6 4 R","5 6 5 R","1","5","1","6","0"];
const L3 = ["L = { a^(2n+1)b^(2m) | n > 0, m >= 0 }","2","1 a","2 b","0 $","0","7","0 q0","1 q1","2 q2","3 q3","4 q4","5 ACCEPT","6 REJECT","7","3 0","0 6 0 R","1 1 1 R","2 6 2 R","3 1","0 5 0 R","1 2 1 R","2 3 2 R","3 2","0 6 0 R","1 1 1 R","2 6 2 R","3 3","0 6 0 R","1 6 1 R","2 4 2 R","3 4","0 5 0 R","1 6 1 R","2 3 2 R","3 5","0 5 0 R","1 5 1 R","2 5 2 R","3 6","0 6 0 R","1 6 1 R","2 6 2 R","1","5","1","6","0"];
const L4 = ["L = { u0110v | u,v ∈ {0,1}* }","2","0 0","1 1","2 $","0","7","0 q0","1 q1","2 q2","3 q3","4 q4","5 ACCEPT","6 REJECT","7","3 0","2 6 2 R","0 1 0 R","1 0 1 R","3 1","2 6 2 R","0 1 0 R","1 2 1 R","3 2","2 6 2 R","0 1 0 R","1 3 1 R","3 3","2 6 2 R","0 4 0 R","1 0 1 R","3 4","2 5 2 R","0 4 0 R","1 4 1 R","3 5","2 5 2 R","0 5 0 R","1 5 1 R","3 6","2 6 2 R","0 6 0 R","1 6 1 R","1","5","1","6","0"];
const L5 = ["L = { uabab | u ∈ {a,b}* }","2","1 a","2 b","0 $","0","7","0 q0","1 q1","2 q2","3 q3","4 q4","5 ACCEPT","6 REJECT","7","3 0","0 6 0 R","1 1 1 R","2 0 2 R","3 1","0 6 0 R","1 1 1 R","2 2 2 R","3 2","0 6 0 R","1 3 1 R","2 0 2 R","3 3","0 6 0 R","1 1 1 R","2 4 2 R","3 4","0 5 0 R","1 1 1 R","2 0 2 R","3 5","0 5 0 R","1 5 1 R","2 5 2 R","3 6","0 6 0 R","1 6 1 R","2 6 2 R","1","5","1","6","0"]
const div_3_b2 = ["Divisible by 3 ( Base 2 )","2","0 0","1 1","2 _","0","5","0 q0","1 q1","2 q2","3 ACCEPT","4 REJECT","5","3 0","2 3 2 R","0 0 0 R","1 1 1 R","3 1","2 4 2 R","0 2 0 R","1 0 1 R","3 2","2 4 2 R","0 1 0 R","1 2 1 R","3 3","2 3 2 R","0 3 0 R","1 3 1 R","3 4","2 4 2 R","0 4 0 R","1 4 1 R","1","3","1","4","0"];
const dib_3_b10 = ["Divisible by 3 ( Base 10 )","10","0 0","1 1","2 2","3 3","4 4","5 5","6 6","7 7","8 8","9 9","10 _","0","5","0 q0","1 q1","2 q2","3 ACCEPT","4 REJECT","5","11 0","10 3 10 R","0 0 0 R","1 1 1 R","2 2 2 R","3 0 3 R","4 1 4 R","5 2 5 R","6 0 6 R","7 1 7 R","8 2 8 R","9 0 9 R","11 1","10 4 10 R","0 1 0 R","1 2 1 R","2 0 2 R","3 1 3 R","4 2 4 R","5 0 5 R","6 1 6 R","7 2 7 R","8 0 8 R","9 1 9 R","11 2","10 4 10 R","0 2 0 R","1 0 1 R","2 1 2 R","3 2 3 R","4 0 4 R","5 1 5 R","6 2 6 R","7 0 7 R","8 1 8 R","9 2 9 R","11 3","10 3 10 R","0 3 0 R","1 3 1 R","2 3 2 R","3 3 3 R","4 3 4 R","5 3 5 R","6 3 6 R","7 3 7 R","8 3 8 R","9 3 9 R","11 4","10 4 10 R","0 4 0 R","1 4 1 R","2 4 2 R","3 4 3 R","4 4 4 R","5 4 5 R","6 4 6 R","7 4 7 R","8 4 8 R","9 4 9 R","1","3","1","4","0"]
export const BLUEPRINTS : string[][] = [ 
    bit_inversion,
    binary_add,
    div_3_b2,
    dib_3_b10,
    L1,
    L2,
    L3,
    L4,
    L5,
];